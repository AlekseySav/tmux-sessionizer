#!/bin/bash

ACTIVE_HINT="\e[032mA\e[0m"
OPEN_HINT="\e[033mO\e[0m"
DEFAULT_HINT="\e[037m-\e[0m"
PROMPT_COLOR="\e[034m"
NO_COLOR="\e[0m"
color_opt=""

config="$HOME/.config/tmux-sessionizer/sessions"
keep=false

usage() {
	echo "Usage: $0 [OPTION]..." >&2
	echo "Run tmux sessionizer" >&2
	echo "" >&2
	echo "  --config <FILE>    specify path to config file (default: ~${config#$HOME})" >&2
	echo "  --no-color         disable colouring" >&2
	echo "  --keep             do not exit after starting tmux" >&2
}

# list_config_sessions [> sessions]
# session format: "$name:$path"
list_config_sessions() {
	while read line; do
		glob="$(echo "$line" | cut -d: -f1)"
		name="$(echo "$line" | cut -d: -f2)"
		if [[ "${glob:0:1}" == "~" ]]; then
			glob="${glob/#\~/$HOME}"
		fi
		for path in $(compgen -G "$glob"); do
			if [ -d "$path" ]; then
				base=$(basename "$path")
				n="${name//%/$base}"
				echo "$n:$path"
			fi
		done
	done <"$config"
}

# get_session_name <session_path> [> session_name]
get_session_name() {
	while read line; do
		glob="$(echo "$line" | cut -d: -f1)"
		name="$(echo "$line" | cut -d: -f2)"
		if [[ "${glob:0:1}" == "~" ]]; then
			glob="${glob/#\~/$HOME}"
		fi
		if [[ "$1" == $glob ]]; then
			base=$(basename "$1")
			echo "${name//%/$base}"
			return
		fi
	done <"$config"
}

# format_sessions [> sessions] {< sessions]
# input session format: see list_config_sessions
# output session format: see run_fzf
# also appends opened tmux sessions
format_sessions() {
	current_session=$(tmux display-message -p '#S')
	if [ -n "$TMUX" ]; then
		echo -e "$ACTIVE_HINT $current_session -"
	fi

	opened_sessions="$(tmux list-sessions | cut -d: -f1)"
	while read session; do
		if [[ "$session" != "$current_session" ]] || [ ! -n "$TMUX" ]; then
			echo -e "$OPEN_HINT $session ."
		fi
	done <<<"$opened_sessions"

	while read line; do
		session=$(echo $line | cut -d: -f1)
		if ! echo "$opened_sessions" | grep -xF "$session" >/dev/null; then
			echo -e "$DEFAULT_HINT $(echo $line | tr : ' ')"
		fi
	done
}

# [noreturn] open_tmux <name> <path>
open_tmux() {
	if [[ "$1" == "" ]]; then
		exit 0
	fi
	if ! tmux has-session -t "$1" 2>/dev/null; then
		mkdir -p "$2"
		TMUX= tmux new -s "$1" -c "$2" -d
	fi
	if [ -n "$TMUX" ]; then
		if [[ $keep == false ]]; then
			exec tmux switch-client -t "$1"
		else
			tmux switch-client -t "$1"
		fi
	else
		if [[ $keep == false ]]; then
			exec tmux attach -t "$1"
		else
			tmux attach -t "$1"
		fi
	fi
}

# run_fzf [< sessions]
# session format: -|A|O <name> <path>
run_fzf() {
	fzf --print-query -i --info=inline --with-nth=1,2 --nth=2 --ansi $color_opt \
		--border=none --list-border=none --input-border=none --header-border=none --no-scrollbar \
		--preview-window=noborder,right,25 \
		--preview='echo -e "\n\n\e[037mCtrl+C\tQuit\nCtrl+A\tAdd new entry\nCtrl+X\tKill session\nEnter\tOpen session\e[0m"' \
		--bind="ctrl-a:become(echo ADD)" \
		--bind="ctrl-x:become(echo KILL; echo {})"
}

# show_prompt <prompt> [> result]
show_prompt() {
	lines=$(tput lines)
	tput cup $lines >&2
	echo -en "$PROMPT_COLOR$1 > $NO_COLOR" >&2
	read a
	echo "$a"
}

# [noreturn] new_session
new_session() {
	dir=$(show_prompt "enter session home directory")
	dir="${dir/#\~/$HOME}"
	name="$(get_session_name "$dir")"
	if [[ "$name" == "" ]]; then
		name=$(show_prompt "enter session name")
		echo "$dir:$name" >>"$config"
	fi
	open_tmux "$name" "$dir"
}

# kill_session
kill_session() {
	yn=$(show_prompt "are you sure you want to kill '$1' [y/n]")
	if [[ "$yn" == "y" ]]; then
		tmux kill-session -t "$1"
	fi
}

# [noreturn] die <message>
die() {
	echo $@ >&2
	exit 1
}

# run
run() {
	res=$(list_config_sessions | format_sessions | run_fzf)
	code=$?
	cmd="$(echo "$res" | head -1)"
	if [[ "$cmd" == "ADD" ]]; then
		new_session
	elif [[ "$cmd" == "KILL" ]]; then
		kill_session "$(echo "$res" | tail -1 | cut -d' ' -f2)"
		run
	elif [[ "$code" == 0 ]]; then
		name=$(echo "$res" | tail -1 | cut -d' ' -f2)
		path=$(echo "$res" | tail -1 | cut -d' ' -f3)
		open_tmux "$name" "$path"
	fi
	return $code
}

command -v fzf >/dev/null || die "fzf not found"
command -v tmux >/dev/null || die "tmux not found"

# parse arguments
while [[ $# -gt 0 ]]; do
	case $1 in
		--no-color) ACTIVE_HINT="A"; OPEN_HINT="O"; DEFAULT_HINT="-"; PROMPT_COLOR=""; NO_COLOR=""; color_opt="--no-color";;
		--config) config="$2"; shift 1;;
		--keep) keep=true;;
		--help) usage; exit;;
		*) echo -e "Invalid option: $1\nTry '$0 --help' for more information" >&2; exit 1;;
	esac
	shift 1
done

while [[ $? == 0 ]]; do
	run
done
